{"version":3,"sources":["Stock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","props","_this","Object","classCallCheck","this","_super","call","state","stockChartXValues","stockChartYValues","inputStock","handleOnChange","bind","assertThisInitialized","handleOnClick","e","preventDefault","fetchStock","setState","target","value","console","log","_this2","setInterval","pointerToThis","API_Call","concat","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","react_default","a","createElement","style","marginTop","onChange","id","type","name","onClick","react_plotly_default","x","y","mode","marker","color","layout","width","height","React","Component","App","className","src_Stock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAmGeA,oDA/Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAI,EAAAC,KAAAF,KAAMJ,IACDO,MAAQ,CACXC,kBAAmB,GACnBC,kBAAmB,GACnBC,WAAY,IAEdT,EAAKU,eAAiBV,EAAKU,eAAeC,KAApBV,OAAAW,EAAA,EAAAX,CAAAD,IACtBA,EAAKa,cAAgBb,EAAKa,cAAcF,KAAnBV,OAAAW,EAAA,EAAAX,CAAAD,IARJA,mDAYnB,SAAcc,GACZA,EAAEC,iBACFZ,KAAKa,2CAGP,SAAeF,GACbX,KAAKc,SAAS,CAACR,WAAYK,EAAEI,OAAOC,QACpCC,QAAQC,IAAIP,EAAEI,OAAOC,wCAGtB,WAAoB,IAAAG,EAAAnB,KAEjBoB,YAAY,WACXH,QAAQC,IAAI,qBACdC,EAAKN,cACD,+BAIP,WACE,IAAMQ,EAAgBrB,KACtBiB,QAAQC,IAAIG,GACZ,IAEIC,EAAQ,0EAAAC,OAA6EvB,KAAKG,MAAMG,WAAxF,6DAAAiB,OAFI,oBAIZC,EAA4B,GAC5BC,EAA4B,GAEhCC,MAAMJ,GACHK,KACC,SAASC,GACP,OAAOA,EAASC,SAGnBF,KACC,SAASG,GAGP,IAAK,IAAIC,KAFTd,QAAQC,IAAIY,GAEIA,EAAK,sBACnBN,EAA0BQ,KAAKD,GAC/BN,EAA0BO,KAAKF,EAAK,sBAAsBC,GAAK,YAIjEV,EAAcP,SAAS,CACrBV,kBAAmBoB,EACnBnB,kBAAmBoB,4BAM7B,WACE,OACEQ,EAAAC,EAAAC,cAAA,WAGEF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,QAAOC,MAAQ,CAACC,UAAW,KACzBJ,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SAAOG,SAAUtC,KAAKO,eAAgBgC,GAAK,QAAQC,KAAK,OAAOC,KAAK,aAAazB,MAAOhB,KAAKG,MAAMG,cAErG2B,EAAAC,EAAAC,cAAA,SAAOO,QAAS1C,KAAKU,cAAe8B,KAAK,SAASxB,MAAM,YAE1DiB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEJ,KAAM,CACJ,CACEc,EAAG5C,KAAKG,MAAMC,kBACdyC,EAAG7C,KAAKG,MAAME,kBACdmC,KAAM,UACNM,KAAM,gBACNC,OAAQ,CAACC,MAAO,SAGpBC,OAAQ,CAACC,MAAO,IAAMC,OAAQ,eAzFpBC,IAAMC,iBCSXC,MARf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACqB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.ee5fe0f5.chunk.js","sourcesContent":["import React from 'react';\nimport Plot from 'react-plotly.js';\n\nclass Stock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockChartXValues: [],\n      stockChartYValues: [],\n      inputStock: '',\n    }\n    this.handleOnChange = this.handleOnChange.bind(this);\n    this.handleOnClick = this.handleOnClick.bind(this);\n\n  }\n\n  handleOnClick(e){\n    e.preventDefault()\n    this.fetchStock()\n  }\n\n  handleOnChange(e){\n    this.setState({inputStock: e.target.value})\n    console.log(e.target.value);\n  }\n\n   componentDidMount() {\n\n      setInterval(()=> {\n       console.log('Calling 5 seconds');\n     this.fetchStock();\n      }, 5000)\n    \n   }\n\n  fetchStock() {\n    const pointerToThis = this;\n    console.log(pointerToThis);\n    const API_KEY = 'YLBQGZ4Z2TRWI8LV';\n    // let StockSymbol = 'FB';\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${this.state.inputStock}&outputsize=compact&interval=5min&outputsize=full&apikey=${API_KEY}`\n  \n    let stockChartXValuesFunction = [];\n    let stockChartYValuesFunction = [];\n\n    fetch(API_Call)\n      .then(\n        function(response) {\n          return response.json();\n        }\n      )\n      .then(\n        function(data) {\n          console.log(data);\n\n          for (var key in data['Time Series (5min)']) {\n            stockChartXValuesFunction.push(key);\n            stockChartYValuesFunction.push(data['Time Series (5min)'][key]['1. open']);\n          }\n\n          // console.log(stockChartXValuesFunction);\n          pointerToThis.setState({\n            stockChartXValues: stockChartXValuesFunction,\n            stockChartYValues: stockChartYValuesFunction\n          });\n        }\n      )\n  }\n\n  render() {\n    return (\n      <div>\n        \n        {/* <input id = 'stock_val' type='text'>Search your stock</input> */}\n        <h1>REAL TIME STOCK PRICE CHART</h1>\n        <form  style= {{marginTop: 10}}>\n          <label>\n            Stock\n            <input onChange={this.handleOnChange} id = \"stock\" type=\"text\" name=\"stock-name\" value={this.state.inputStock}/>\n          </label>\n          <input onClick={this.handleOnClick} type=\"submit\" value=\"Submit\" />\n        </form>\n        <Plot\n          data={[\n            {\n              x: this.state.stockChartXValues,\n              y: this.state.stockChartYValues,\n              type: 'scatter',\n              mode: 'lines+markers',\n              marker: {color: 'red'},\n            }\n          ]}\n          layout={{width: 1000, height: 640}}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Stock;","import React from 'react';\nimport Stock from './Stock';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stock></Stock>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}